/* This file is automatically generated by i386-gen.  Do not edit!  */
/* Copyright (C) 2007-2015 Free Software Foundation, Inc.

   This file is part of the GNU opcodes library.

   This library is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 3, or (at your option)
   any later version.

   It is distributed in the hope that it will be useful, but WITHOUT
   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
   License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
   MA 02110-1301, USA.  */

/* i386 opcode table.  */

const insn_template heptane_optab[] =
{
    { "add", instrg_isBasicALU, 0, 0,0xffff0100 } ,   
    { "sub", instrg_isBasicALU, 4, 0,0xffff0100 } ,   
    { "and", instrg_isBasicALU, 8, 0,0xffff0100 } ,   
    { "or",  instrg_isBasicALU, 12, 0,0xffff0100 } ,   
    { "xor", instrg_isBasicALU, 16, 0,0xffff0100 } ,   
    { "addx", instrg_isBasicALU, 0, 1,0xffff0100 } ,   
    { "subx", instrg_isBasicALU, 4, 1,0xffff0100 } ,   
    { "andx", instrg_isBasicALU, 8, 1,0xffff0100 } ,   
    { "orx",  instrg_isBasicALU, 12, 1,0xffff0100 } ,   
    { "xorx", instrg_isBasicALU, 16, 1,0xffff0100 } ,   

    { "sal",  instrg_isBasicShift, 20, 0,0xffff0300 } ,   
    { "shl",  instrg_isBasicShift, 20, 0,0xffff0300 } ,   
    { "sar",  instrg_isBasicShift, 21, 0,0xffff0300 } ,   
    { "shr",  instrg_isBasicShift, 22, 0,0xffff0300 } ,   
    
    { "mov",  instrg_isMov, 183, 0, 0x03020100 } ,
    
    { "movsb", instrg_isExt, 189, 0, 0xffff0200} ,
    { "movsw", instrg_isExt, 190, 0, 0xffff0200} ,
    { "movsl", instrg_isExt, 193, 0, 0xffffff00} ,

    { "movzb", instrg_isExt, 187, 0, 0xffff0000} ,
    { "movzw", instrg_isExt, 188, 0, 0xffff0000} ,
    
    { "cmp", instrg_isBasicCmpTest, 46, 0, 0xaaac0100} ,
    { "test", instrg_isBasicCmpTest, 50, 0, 0xffff0100} ,
    { "jz", instrg_isCondJump, 180, 0, 0xffffffff},
    { "je", instrg_isCondJump, 180, 0, 0xffffffff},
    { "jnz", instrg_isCondJump, 180, 1, 0xffffffff},
    { "jne", instrg_isCondJump, 180, 1, 0xffffffff},
    { "js", instrg_isCondJump, 180, 2, 0xffffffff},
    { "jns", instrg_isCondJump, 180, 3, 0xffffffff},
    { "ja", instrg_isCondJump, 180, 4, 0xffffffff},
    { "jnbe", instrg_isCondJump, 180, 4, 0xffffffff},
    { "jna", instrg_isCondJump, 180, 5, 0xffffffff},
    { "jbe", instrg_isCondJump, 180, 5, 0xffffffff},
    { "jae", instrg_isCondJump, 180, 7, 0xffffffff},
    { "jnb", instrg_isCondJump, 180, 7, 0xffffffff},
    { "jnc", instrg_isCondJump, 180, 6, 0xffffffff},
    { "jb", instrg_isCondJump, 180, 6, 0xffffffff},
    { "jnae", instrg_isCondJump, 180, 6, 0xffffffff},
    { "jc", instrg_isCondJump, 180, 7, 0xffffffff},
    { "jg", instrg_isCondJump, 180, 8, 0xffffffff},
    { "jnle", instrg_isCondJump, 180, 8, 0xffffffff},
    { "jle", instrg_isCondJump, 180, 9, 0xffffffff},
    { "jng", instrg_isCondJump, 180, 9, 0xffffffff},
    { "jge", instrg_isCondJump, 180, 10, 0xffffffff},
    { "jnl", instrg_isCondJump, 180, 10, 0xffffffff},
    { "jl", instrg_isCondJump, 180, 11, 0xffffffff},
    { "jnge", instrg_isCondJump, 180, 11, 0xffffffff},
    { "jo", instrg_isCondJump, 180, 12, 0xffffffff},
    { "jno", instrg_isCondJump, 180, 13, 0xffffffff},
    { "jp", instrg_isCondJump, 180, 14, 0xffffffff},
    { "jpe", instrg_isCondJump, 180, 14, 0xffffffff},
    { "jnp", instrg_isCondJump, 180, 15, 0xffffffff},
    { "jpo", instrg_isCondJump, 180, 15, 0xffffffff},
    //WARNING : np is always taken, doesn;t test p flag
    
    { "csetz", instrg_isCSet, 180, 0, 0xffff00ff},
    { "csete", instrg_isCSet, 180, 0, 0xffff00ff},
    { "csetnz", instrg_isCSet, 180, 1, 0xffff00ff},
    { "csetne", instrg_isCSet, 180, 1, 0xffff00ff},
    { "csets", instrg_isCSet, 180, 2, 0xffff00ff},
    { "csetns", instrg_isCSet, 180, 3, 0xffff00ff},
    { "cseta", instrg_isCSet, 180, 4, 0xffff00ff},
    { "csetnbe", instrg_isCSet, 180, 4, 0xffff00ff},
    { "csetna", instrg_isCSet, 180, 5, 0xffff00ff},
    { "csetbe", instrg_isCSet, 180, 5, 0xffff00ff},
    { "csetae", instrg_isCSet, 180, 7, 0xffff00ff},
    { "csetnb", instrg_isCSet, 180, 7, 0xffff00ff},
    { "csetnc", instrg_isCSet, 180, 6, 0xffff00ff},
    { "csetb", instrg_isCSet, 180, 6, 0xffff00ff},
    { "csetnae", instrg_isCSet, 180, 6, 0xffff00ff},
    { "csetc", instrg_isCSet, 180, 7, 0xffff00ff},
    { "csetg", instrg_isCSet, 180, 8, 0xffff00ff},
    { "csetnle", instrg_isCSet, 180, 8, 0xffff00ff},
    { "csetle", instrg_isCSet, 180, 9, 0xffff00ff},
    { "csetng", instrg_isCSet, 180, 9, 0xffff00ff},
    { "csetge", instrg_isCSet, 180, 10, 0xffff00ff},
    { "csetnl", instrg_isCSet, 180, 10, 0xffff00ff},
    { "csetl", instrg_isCSet, 180, 11, 0xffff00ff},
    { "csetnge", instrg_isCSet, 180, 11, 0xffff00ff},
    { "cseto", instrg_isCSet, 180, 12, 0xffff00ff},
    { "csetno", instrg_isCSet, 180, 13, 0xffff00ff},
    { "csetp", instrg_isCSet, 180, 14, 0xffff00ff},
    { "csetpe", instrg_isCSet, 180, 14, 0xffff00ff},
    { "csetnp", instrg_isCSet, 180, 15, 0xffff00ff},
    { "csetpo", instrg_isCSet, 180, 15, 0xffff00ff},
    
    { "jmp", instrg_isUncondJump, 181, 0, 0xffffffff},
    { "push", instrg_push_pop, -1, 1, 0xff00ff00},
    { "pop", instrg_push_pop, -1, 0, 0xff00ff00},
    { "call", instrg_isCall, -1, 0, 0xffffffff},
    { "ret", instrg_isRet, -1, 0, 0xffffffff},
    { "movabs", instrg_mov_abs, -1, 0, 0xffffff00},
    { "movabsp", instrg_mov_abs, -1, 1, 0xffffff00},
    { "movdqu", instrg_mov_xmm_i, 0x40, 0x54, 0xffffffff},
    { "movdqa", instrg_mov_xmm_i, 0x58, 0x40, 0xffffffff},
    { "movups", instrg_mov_xmm_i, 0x44, 0x58, 0xffffffff},
    { "movaps", instrg_mov_xmm_i, 0x5c, 0x44, 0xffffffff},
    { "movupd", instrg_mov_xmm_i, 0x42, 0x56, 0xffffffff},
    { "movapd", instrg_mov_xmm_i, 0x5a, 0x42, 0xffffffff},
    { "movss",  instrg_mov_xmm_i,   0x4a, 0x50, 0xffffffff},
    { "movsd",  instrg_mov_xmm_i,   0x52, 0x4a, 0xffffffff},
    { "movse",  instrg_mov_xmm_i,   0x48, 0, 0xffffffff},
    { "movde",  instrg_mov_xmm_i,   0x50, 0, 0xffffffff},
    { "movee",  instrg_mov_xmm_i,   0x46, 0x46, 0xffffffff},
    { "movsds", instrg_mov_xmm_i,   0x4c, 0, 0xffffffff},   
    { "movsdp64", instrg_mov_xmm_i, 0x54, 0, 0xffffffff},
    { "movqa",  instrg_mov_xmm_i, 0x4e, 0x52, 0xffffffff},
    { "movups64", instrg_mov_xmm_i, 0x56, 0x5a, 0xffffffff},
    { "movspl", instrg_mov_xmm_i,   0x5e, 0x5e, 0xffffffff},
    { "moves",  instrg_mov_xmm_i,   0x48, 0x4c, 0xffffffff},
    { "moved",  instrg_mov_xmm_i,   0x50, 0x48, 0xffffffff},
    { "movdss", instrg_mov_xmm_i,   0x4c, 0x4e, 0xffffffff},  
    
    { "muldh",  instrg_isFPU23Op,     120,  4, 0x0}, 
    { "muldl",  instrg_isFPU23Op,     56,   5, 0x0}, 
    { "muldp",  instrg_isFPU23Op,     58,   8, 0x0}, 
    { "xmuldh",  instrg_isFPU23Op,     120,  4, 0x2}, 
    { "xmuldl",  instrg_isFPU23Op,     56,   5, 0x1}, 
    { "xmuldp",  instrg_isFPU23Op,     58,   8, 0x3}, 
    { "xlmuldp",  instrg_isFPU23Op,     58,   8, 0x1}, 
    { "xhmuldp",  instrg_isFPU23Op,     58,   8, 0x2}, 
    
    { "adddh",  instrg_isFPU23Op,     116,  0, 0x0}, 
    { "adddl",  instrg_isFPU23Op,     52,   1, 0x0}, 
    { "adddp",  instrg_isFPU23Op,     60,   6, 0x0}, 
    { "xadddh",  instrg_isFPU23Op,     116,  0, 0x2}, 
    { "xadddl",  instrg_isFPU23Op,     52,   1, 0x1}, 
    { "xadddp",  instrg_isFPU23Op,     60,   6, 0x3}, 
    { "xladddp",  instrg_isFPU23Op,     60,   6, 0x1}, 
    { "xhadddp",  instrg_isFPU23Op,     60,   6, 0x2}, 
    { "sxadddp",  instrg_isFPU23Op,     0,   6, 0x7}, 
    { "sxladddp",  instrg_isFPU23Op,     0,   6, 0x5}, 
    { "sxhadddp",  instrg_isFPU23Op,     0,   6, 0x6}, 

    { "subdh",  instrg_isFPU23Op,     118,  3, 0x0}, 
    { "subdl",  instrg_isFPU23Op,     54,   3, 0x0}, 
    { "subdp",  instrg_isFPU23Op,     62,   7, 0x0}, 
    { "xsubdh",  instrg_isFPU23Op,     118,  2, 0x2}, 
    { "xsubdl",  instrg_isFPU23Op,     54,   3, 0x1}, 
    { "xsubdp",  instrg_isFPU23Op,     62,   7, 0x3}, 
    { "xlsubdp",  instrg_isFPU23Op,     62,   7, 0x1}, 
    { "xhsubdp",  instrg_isFPU23Op,     62,   7, 0x2}, 
    { "sxsubdp",  instrg_isFPU23Op,     62,   7, 0x7}, 
    { "sxlsubdp",  instrg_isFPU23Op,     0,   7, 0x5}, 
    { "sxhsubdp",  instrg_isFPU23Op,     0,   7, 0x6}, 

    { "xaddsubdp",  instrg_isFPU23Op,     0,   9, 0x3}, 
    { "xladdsubdp",  instrg_isFPU23Op,     0,   9, 0x1}, 
    { "xhaddsubdp",  instrg_isFPU23Op,     0,   9, 0x2}, 
    { "sxaddsubdp",  instrg_isFPU23Op,     0,   9, 0x7}, 
    { "sxladdsubdp",  instrg_isFPU23Op,     0,   9, 0x5}, 
    { "sxhaddsubdp",  instrg_isFPU23Op,     0,   9, 0x6}, 

    { "mulsd",  instrg_isFPU23Op,     56,   5, 0x0}, 
    { "mulpd",  instrg_isFPU23Op,     58,   8, 0x0}, 
    
    { "addsd",  instrg_isFPU23Op,     52,   1, 0x0}, 
    { "addpd",  instrg_isFPU23Op,     60,   6, 0x0}, 

    { "subsd",  instrg_isFPU23Op,     54,   3, 0x0}, 
    { "subpd",  instrg_isFPU23Op,     62,   7, 0x0}, 

    { NULL, 0, 0, 0, 0} 
    
};

/* i386 register table.  */

const reg_entry heptane_regtab[] =
{
  {"eax",0,{.bitfield={.reg32=1}}},
  {"ebx",1,{.bitfield={.reg32=1}}},
  {"ecx",2,{.bitfield={.reg32=1}}},
  {"edx",3,{.bitfield={.reg32=1}}},
  {"esp",4,{.bitfield={.reg32=1}}},
  {"ebp",5,{.bitfield={.reg32=1}}},
  {"esi",6,{.bitfield={.reg32=1}}},
  {"edi",7,{.bitfield={.reg32=1}}},
  
  {"r8d",8,{.bitfield={.reg32=1}}},
  {"r9d",9,{.bitfield={.reg32=1}}},
  {"r10d",10,{.bitfield={.reg32=1}}},
  {"r11d",11,{.bitfield={.reg32=1}}},
  {"r12d",12,{.bitfield={.reg32=1}}},
  {"r13d",13,{.bitfield={.reg32=1}}},
  {"r14d",14,{.bitfield={.reg32=1}}},
  {"r15d",15,{.bitfield={.reg32=1}}},
  
  {"r16d",16,{.bitfield={.reg32=1}}},
  {"r17d",17,{.bitfield={.reg32=1}}},
  {"r18d",18,{.bitfield={.reg32=1}}},
  {"r19d",19,{.bitfield={.reg32=1}}},
  {"r20d",20,{.bitfield={.reg32=1}}},
  {"r21d",21,{.bitfield={.reg32=1}}},
  {"r22d",22,{.bitfield={.reg32=1}}},
  {"r23d",23,{.bitfield={.reg32=1}}},
  
  {"r24d",24,{.bitfield={.reg32=1}}},
  {"r25d",25,{.bitfield={.reg32=1}}},
  {"r26d",26,{.bitfield={.reg32=1}}},
  {"r27d",27,{.bitfield={.reg32=1}}},
  {"r28d",28,{.bitfield={.reg32=1}}},
  {"r29d",29,{.bitfield={.reg32=1}}},
  {"r30d",30,{.bitfield={.reg32=1}}},
  {"r31d",31,{.bitfield={.reg32=1}}},

  {"rip",255,{.bitfield={.reg64=1}}},
  {"rax",0,{.bitfield={.reg64=1}}},
  {"rbx",1,{.bitfield={.reg64=1}}},
  {"rcx",2,{.bitfield={.reg64=1}}},
  {"rdx",3,{.bitfield={.reg64=1}}},
  {"rsp",4,{.bitfield={.reg64=1}}},
  {"rbp",5,{.bitfield={.reg64=1}}},
  {"rsi",6,{.bitfield={.reg64=1}}},
  {"rdi",7,{.bitfield={.reg64=1}}},
  
  {"r8",8,{.bitfield={.reg64=1}}},
  {"r9",9,{.bitfield={.reg64=1}}},
  {"r10",10,{.bitfield={.reg64=1}}},
  {"r11",11,{.bitfield={.reg64=1}}},
  {"r12",12,{.bitfield={.reg64=1}}},
  {"r13",13,{.bitfield={.reg64=1}}},
  {"r14",14,{.bitfield={.reg64=1}}},
  {"r15",15,{.bitfield={.reg64=1}}},
  
  {"r16",16,{.bitfield={.reg64=1}}},
  {"r17",17,{.bitfield={.reg64=1}}},
  {"r18",18,{.bitfield={.reg64=1}}},
  {"r19",19,{.bitfield={.reg64=1}}},
  {"r20",20,{.bitfield={.reg64=1}}},
  {"r21",21,{.bitfield={.reg64=1}}},
  {"r22",22,{.bitfield={.reg64=1}}},
  {"r23",23,{.bitfield={.reg64=1}}},
  
  {"r24",24,{.bitfield={.reg64=1}}},
  {"r25",25,{.bitfield={.reg64=1}}},
  {"r26",26,{.bitfield={.reg64=1}}},
  {"r27",27,{.bitfield={.reg64=1}}},
  {"r28",28,{.bitfield={.reg64=1}}},
  {"r29",29,{.bitfield={.reg64=1}}},
  {"r30",30,{.bitfield={.reg64=1}}},
  {"r31",31,{.bitfield={.reg64=1}}},

  {"ax",0,{.bitfield={.reg16=1}}},
  {"bx",1,{.bitfield={.reg16=1}}},
  {"cx",2,{.bitfield={.reg16=1}}},
  {"dx",3,{.bitfield={.reg16=1}}},
  {"sp",4,{.bitfield={.reg16=1}}},
  {"bp",5,{.bitfield={.reg16=1}}},
  {"si",6,{.bitfield={.reg16=1}}},
  {"di",7,{.bitfield={.reg16=1}}},
  
  {"r8w",8,{.bitfield={.reg16=1}}},
  {"r9w",9,{.bitfield={.reg16=1}}},
  {"r10w",10,{.bitfield={.reg16=1}}},
  {"r11w",11,{.bitfield={.reg16=1}}},
  {"r12w",12,{.bitfield={.reg16=1}}},
  {"r13w",13,{.bitfield={.reg16=1}}},
  {"r14w",14,{.bitfield={.reg16=1}}},
  {"r15w",15,{.bitfield={.reg16=1}}},
  
  {"r16w",16,{.bitfield={.reg16=1}}},
  {"r17w",17,{.bitfield={.reg16=1}}},
  {"r18w",18,{.bitfield={.reg16=1}}},
  {"r19w",19,{.bitfield={.reg16=1}}},
  {"r20w",20,{.bitfield={.reg16=1}}},
  {"r21w",21,{.bitfield={.reg16=1}}},
  {"r22w",22,{.bitfield={.reg16=1}}},
  {"r23w",23,{.bitfield={.reg16=1}}},
  
  {"r24w",24,{.bitfield={.reg16=1}}},
  {"r25w",25,{.bitfield={.reg16=1}}},
  {"r26w",26,{.bitfield={.reg16=1}}},
  {"r27w",27,{.bitfield={.reg16=1}}},
  {"r28w",28,{.bitfield={.reg16=1}}},
  {"r29w",29,{.bitfield={.reg16=1}}},
  {"r30w",30,{.bitfield={.reg16=1}}},
  {"r31w",31,{.bitfield={.reg16=1}}},

  {"al",0,{.bitfield={.reg8=1}}},
  {"bl",1,{.bitfield={.reg8=1}}},
  {"cl",2,{.bitfield={.reg8=1}}},
  {"dl",3,{.bitfield={.reg8=1}}},
  {"spl",4,{.bitfield={.reg8=1}}},
  {"bpl",5,{.bitfield={.reg8=1}}},
  {"sil",6,{.bitfield={.reg8=1}}},
  {"dil",7,{.bitfield={.reg8=1}}},
  
  {"r8b",8,{.bitfield={.reg8=1}}},
  {"r9b",9,{.bitfield={.reg8=1}}},
  {"r10b",10,{.bitfield={.reg8=1}}},
  {"r11b",11,{.bitfield={.reg8=1}}},
  {"r12b",12,{.bitfield={.reg8=1}}},
  {"r13b",13,{.bitfield={.reg8=1}}},
  {"r14b",14,{.bitfield={.reg8=1}}},
  {"r15b",15,{.bitfield={.reg8=1}}},
 
  {"r16b",16,{.bitfield={.reg8=1}}},
  {"r17b",17,{.bitfield={.reg8=1}}},
  {"r18b",18,{.bitfield={.reg8=1}}},
  {"r19b",19,{.bitfield={.reg8=1}}},
  {"r20b",20,{.bitfield={.reg8=1}}},
  {"r21b",21,{.bitfield={.reg8=1}}},
  {"r22b",22,{.bitfield={.reg8=1}}},
  {"r23b",23,{.bitfield={.reg8=1}}},
  
  {"r24b",24,{.bitfield={.reg8=1}}},
  {"r25b",25,{.bitfield={.reg8=1}}},
  {"r26b",26,{.bitfield={.reg8=1}}},
  {"r27b",27,{.bitfield={.reg8=1}}},
  {"r28b",28,{.bitfield={.reg8=1}}},
  {"r29b",29,{.bitfield={.reg8=1}}},
  {"r30b",30,{.bitfield={.reg8=1}}},
  {"r31b",31,{.bitfield={.reg8=1}}},

  {"ah",-32,{.bitfield={.reg8=1}}},
  {"bh",-1,{.bitfield={.reg8=1}}},
  {"ch",-2,{.bitfield={.reg8=1}}},
  {"dh",-3,{.bitfield={.reg8=1}}},
  {"sph",-4,{.bitfield={.reg8=1}}},
  {"bph",-5,{.bitfield={.reg8=1}}},
  {"sih",-6,{.bitfield={.reg8=1}}},
  {"dih",-7,{.bitfield={.reg8=1}}},
  
  {"r8h",-8,{.bitfield={.reg8=1}}},
  {"r9h",-9,{.bitfield={.reg8=1}}},
  {"r10h",-10,{.bitfield={.reg8=1}}},
  {"r11h",-11,{.bitfield={.reg8=1}}},
  {"r12h",-12,{.bitfield={.reg8=1}}},
  {"r13h",-13,{.bitfield={.reg8=1}}},
  {"r14h",-14,{.bitfield={.reg8=1}}},
  {"r15h",-15,{.bitfield={.reg8=1}}},
 
  {"r16h",-16,{.bitfield={.reg8=1}}},
  {"r17h",-17,{.bitfield={.reg8=1}}},
  {"r18h",-18,{.bitfield={.reg8=1}}},
  {"r19h",-19,{.bitfield={.reg8=1}}},
  {"r20h",-20,{.bitfield={.reg8=1}}},
  {"r21h",-21,{.bitfield={.reg8=1}}},
  {"r22h",-22,{.bitfield={.reg8=1}}},
  {"r23h",-23,{.bitfield={.reg8=1}}},
  
  {"r24h",-24,{.bitfield={.reg8=1}}},
  {"r25h",-25,{.bitfield={.reg8=1}}},
  {"r26h",-26,{.bitfield={.reg8=1}}},
  {"r27h",-27,{.bitfield={.reg8=1}}},
  {"r28h",-28,{.bitfield={.reg8=1}}},
  {"r29h",-29,{.bitfield={.reg8=1}}},
  {"r30h",-30,{.bitfield={.reg8=1}}},
  {"r31h",-31,{.bitfield={.reg8=1}}},
  {"xmm0",16,{.bitfield={.regxmm=1}}},
  {"xmm1",17,{.bitfield={.regxmm=1}}},
  {"xmm2",18,{.bitfield={.regxmm=1}}},
  {"xmm3",19,{.bitfield={.regxmm=1}}},
  {"xmm4",20,{.bitfield={.regxmm=1}}},
  {"xmm5",21,{.bitfield={.regxmm=1}}},
  {"xmm6",22,{.bitfield={.regxmm=1}}},
  {"xmm7",23,{.bitfield={.regxmm=1}}},
  {"xmm8",24,{.bitfield={.regxmm=1}}},
  {"xmm9",25,{.bitfield={.regxmm=1}}},
  {"xmm10",26,{.bitfield={.regxmm=1}}},
  {"xmm11",27,{.bitfield={.regxmm=1}}},
  {"xmm12",28,{.bitfield={.regxmm=1}}},
  {"xmm13",29,{.bitfield={.regxmm=1}}},
  {"xmm14",30,{.bitfield={.regxmm=1}}},
  {"xmm15",31,{.bitfield={.regxmm=1}}},
  {"xmm16",0,{.bitfield={.regxmm=1}}},
  {"xmm17",1,{.bitfield={.regxmm=1}}},
  {"xmm18",2,{.bitfield={.regxmm=1}}},
  {"xmm19",3,{.bitfield={.regxmm=1}}},
  {"xmm20",4,{.bitfield={.regxmm=1}}},
  {"xmm21",5,{.bitfield={.regxmm=1}}},
  {"xmm22",6,{.bitfield={.regxmm=1}}},
  {"xmm23",7,{.bitfield={.regxmm=1}}},
  {"xmm24",8,{.bitfield={.regxmm=1}}},
  {"xmm25",9,{.bitfield={.regxmm=1}}},
  {"xmm26",10,{.bitfield={.regxmm=1}}},
  {"xmm27",11,{.bitfield={.regxmm=1}}},
  {"xmm28",12,{.bitfield={.regxmm=1}}},
  {"xmm29",13,{.bitfield={.regxmm=1}}},
  {"xmm30",14,{.bitfield={.regxmm=1}}},
  {"xmm31",15,{.bitfield={.regxmm=1}}}
};

const unsigned int heptane_regtab_size = ARRAY_SIZE (heptane_regtab);
